2024-10-11 00:04:34.631 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:34.658 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:34.659 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:34.660 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:34.662 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:34.663 +07:00 [INF] Getting all doctors
2024-10-11 00:04:34.719 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:34.720 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:34.721 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 58.148ms.
2024-10-11 00:04:34.722 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:34.723 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 61.7866ms
2024-10-11 00:04:34.724 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:34.725 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 94.4961ms
2024-10-11 00:04:34.841 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:34.841 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:34.842 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:34.843 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:34.846 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:34.847 +07:00 [INF] Getting all doctors
2024-10-11 00:04:34.849 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:34.851 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:34.851 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.3607ms.
2024-10-11 00:04:34.853 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:34.854 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 7.9073ms
2024-10-11 00:04:34.855 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:34.856 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.1081ms
2024-10-11 00:04:35.040 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/patient/patient1 - -
2024-10-11 00:04:35.041 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:35.042 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.043 +07:00 [INF] Route matched with {action = "GetPatientByLogin", controller = "Patient"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.Patient.PatientResponse] GetPatientByLoginAsync(System.String) on controller MedTimeSlot.Api.Controllers.PatientController (MedTimeSlot.Api).
2024-10-11 00:04:35.044 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:35.045 +07:00 [INF] Getting patient by login
2024-10-11 00:04:35.048 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE lower(p."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:04:35.051 +07:00 [INF] Retrieved patient
2024-10-11 00:04:35.051 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 6.0267ms.
2024-10-11 00:04:35.052 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.Patient.PatientResponse'.
2024-10-11 00:04:35.054 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) in 9.5645ms
2024-10-11 00:04:35.055 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.056 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/patient/patient1 - - - 200 - application/json;+charset=utf-8 15.2418ms
2024-10-11 00:04:35.316 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:35.317 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:35.318 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.318 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:35.320 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:35.321 +07:00 [INF] Getting all doctors
2024-10-11 00:04:35.323 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:35.325 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:35.326 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.1984ms.
2024-10-11 00:04:35.328 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:35.329 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 8.8523ms
2024-10-11 00:04:35.331 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.332 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.4748ms
2024-10-11 00:04:35.476 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:35.476 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:35.477 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.478 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:35.479 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:35.480 +07:00 [INF] Getting all doctors
2024-10-11 00:04:35.482 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:35.484 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:35.485 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.9226ms.
2024-10-11 00:04:35.487 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:35.488 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.0915ms
2024-10-11 00:04:35.489 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.490 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 14.9097ms
2024-10-11 00:04:35.621 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/patient/patient1 - -
2024-10-11 00:04:35.622 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:35.622 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.623 +07:00 [INF] Route matched with {action = "GetPatientByLogin", controller = "Patient"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.Patient.PatientResponse] GetPatientByLoginAsync(System.String) on controller MedTimeSlot.Api.Controllers.PatientController (MedTimeSlot.Api).
2024-10-11 00:04:35.625 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:35.625 +07:00 [INF] Getting patient by login
2024-10-11 00:04:35.628 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE lower(p."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:04:35.629 +07:00 [INF] Retrieved patient
2024-10-11 00:04:35.630 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.1671ms.
2024-10-11 00:04:35.631 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.Patient.PatientResponse'.
2024-10-11 00:04:35.631 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) in 7.1794ms
2024-10-11 00:04:35.632 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 00:04:35.633 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/patient/patient1 - - - 200 - application/json;+charset=utf-8 12.1436ms
2024-10-11 00:04:36.592 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:36.593 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:36.593 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:36.594 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:36.599 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:36.600 +07:00 [INF] Getting all doctors
2024-10-11 00:04:36.602 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:36.604 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:36.604 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.254ms.
2024-10-11 00:04:36.606 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:36.606 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 7.9012ms
2024-10-11 00:04:36.607 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:36.608 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 16.5487ms
2024-10-11 00:04:42.591 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:42.592 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:42.592 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:42.593 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:42.596 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:42.597 +07:00 [INF] Getting all doctors
2024-10-11 00:04:42.600 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:42.602 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:42.602 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.1941ms.
2024-10-11 00:04:42.604 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:42.605 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.1018ms
2024-10-11 00:04:42.606 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:42.607 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.7158ms
2024-10-11 00:04:42.763 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 00:04:42.764 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:42.765 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:04:42.770 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:42.772 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:42.774 +07:00 [INF] Getting doctor
2024-10-11 00:04:42.783 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:04:42.787 +07:00 [INF] Getting doctor successfully
2024-10-11 00:04:42.787 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 14.6526ms.
2024-10-11 00:04:42.788 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 00:04:42.789 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 17.9549ms
2024-10-11 00:04:42.790 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:04:42.791 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 27.8788ms
2024-10-11 00:04:44.288 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:04:44.289 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:44.290 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:44.291 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:44.292 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:44.293 +07:00 [INF] Getting all doctors
2024-10-11 00:04:44.295 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:04:44.298 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:04:44.299 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.5948ms.
2024-10-11 00:04:44.300 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:04:44.301 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.3528ms
2024-10-11 00:04:44.302 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:04:44.303 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 14.9918ms
2024-10-11 00:04:44.417 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 00:04:44.418 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:04:44.418 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:04:44.419 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:04:44.421 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:04:44.422 +07:00 [INF] Getting doctor
2024-10-11 00:04:44.424 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:04:44.425 +07:00 [INF] Getting doctor successfully
2024-10-11 00:04:44.426 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.7125ms.
2024-10-11 00:04:44.428 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 00:04:44.429 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 8.2012ms
2024-10-11 00:04:44.430 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:04:44.431 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 13.7415ms
2024-10-11 00:10:10.375 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:10:10.376 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:10.376 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:10.377 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:10.379 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:10.381 +07:00 [INF] Getting all doctors
2024-10-11 00:10:10.426 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:10:10.428 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:10:10.428 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 47.5785ms.
2024-10-11 00:10:10.430 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:10:10.431 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 51.9139ms
2024-10-11 00:10:10.432 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:10.433 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 57.7717ms
2024-10-11 00:10:10.576 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:10:10.577 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:10.578 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:10.579 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:10.582 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:10.583 +07:00 [INF] Getting all doctors
2024-10-11 00:10:10.585 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:10:10.588 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:10:10.588 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.6113ms.
2024-10-11 00:10:10.590 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:10:10.591 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.5109ms
2024-10-11 00:10:10.592 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:10.593 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 16.9727ms
2024-10-11 00:10:10.749 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 00:10:10.750 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:10.751 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:10:10.752 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:10.754 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:10.754 +07:00 [INF] Getting doctor
2024-10-11 00:10:10.758 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:10:10.760 +07:00 [INF] Getting doctor successfully
2024-10-11 00:10:10.761 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 6.6308ms.
2024-10-11 00:10:10.762 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 00:10:10.764 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 10.4302ms
2024-10-11 00:10:10.765 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:10:10.766 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 16.3512ms
2024-10-11 00:10:11.292 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:10:11.293 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:11.294 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:11.295 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:11.297 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:11.298 +07:00 [INF] Getting all doctors
2024-10-11 00:10:11.300 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:10:11.302 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:10:11.302 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.7186ms.
2024-10-11 00:10:11.304 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:10:11.305 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 8.51ms
2024-10-11 00:10:11.306 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:11.308 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.4113ms
2024-10-11 00:10:11.419 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 00:10:11.420 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:11.420 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:11.421 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:11.423 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:11.424 +07:00 [INF] Getting all doctors
2024-10-11 00:10:11.426 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 00:10:11.428 +07:00 [INF] Getting all doctors successfully
2024-10-11 00:10:11.429 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.1208ms.
2024-10-11 00:10:11.431 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 00:10:11.432 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.7543ms
2024-10-11 00:10:11.433 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 00:10:11.434 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.5453ms
2024-10-11 00:10:11.540 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 00:10:11.541 +07:00 [INF] CORS policy execution successful.
2024-10-11 00:10:11.542 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:10:11.543 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 00:10:11.544 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 00:10:11.545 +07:00 [INF] Getting doctor
2024-10-11 00:10:11.548 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 00:10:11.549 +07:00 [INF] Getting doctor successfully
2024-10-11 00:10:11.550 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 4.8306ms.
2024-10-11 00:10:11.551 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 00:10:11.552 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 8.1944ms
2024-10-11 00:10:11.553 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 00:10:11.554 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 13.8982ms
2024-10-11 12:14:04.825 +07:00 [INF] Application is shutting down...
2024-10-11 12:14:22.761 +07:00 [INF] Executed DbCommand (1,217ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 12:14:23.129 +07:00 [INF] Executed DbCommand (254ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 12:14:23.848 +07:00 [INF] Executed DbCommand (532ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 12:14:24.427 +07:00 [INF] Executed DbCommand (51ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 12:14:24.472 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 12:14:24.484 +07:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 12:14:24.491 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 12:14:24.495 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 12:14:24.498 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 12:14:24.503 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 12:14:24.506 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 12:14:24.510 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 12:14:24.516 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 12:14:24.621 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 12:14:24.673 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 12:14:24.676 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 12:14:24.677 +07:00 [INF] Hosting environment: Development
2024-10-11 12:14:24.678 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 12:15:43.961 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:15:44.016 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:15:44.103 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 12:15:44.106 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:15:44.184 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:15:44.184 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:15:44.203 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:15:44.204 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:15:44.312 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:15:44.315 +07:00 [INF] Getting all doctors
2024-10-11 12:15:44.320 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:15:44.322 +07:00 [INF] Getting doctor
2024-10-11 12:15:44.521 +07:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:15:44.601 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:15:44.607 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 289.8023ms.
2024-10-11 12:15:44.613 +07:00 [INF] Executed DbCommand (19ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:15:44.619 +07:00 [INF] Getting doctor successfully
2024-10-11 12:15:44.620 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 299.0249ms.
2024-10-11 12:15:44.622 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:15:44.622 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 12:15:44.766 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 556.2455ms
2024-10-11 12:15:44.766 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 557.4184ms
2024-10-11 12:15:44.768 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:15:44.768 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:15:44.783 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 823.9935ms
2024-10-11 12:15:44.783 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 678.8226ms
2024-10-11 12:16:12.989 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:16:12.990 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:12.993 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:16:12.994 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:16:13.000 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:13.001 +07:00 [INF] Getting all doctors
2024-10-11 12:16:13.006 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:16:13.009 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:16:13.009 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 8.7193ms.
2024-10-11 12:16:13.011 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:16:13.013 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 17.6375ms
2024-10-11 12:16:13.014 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:16:13.016 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 27.7755ms
2024-10-11 12:16:13.135 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 12:16:13.136 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:13.137 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:16:13.138 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:16:13.140 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:13.141 +07:00 [INF] Getting doctor
2024-10-11 12:16:13.147 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:16:13.148 +07:00 [INF] Getting doctor successfully
2024-10-11 12:16:13.149 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 8.2688ms.
2024-10-11 12:16:13.150 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 12:16:13.151 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 12.4071ms
2024-10-11 12:16:13.152 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:16:13.153 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 17.8307ms
2024-10-11 12:16:29.343 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:16:29.344 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:29.346 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 3.1915ms
2024-10-11 12:16:29.378 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:29.379 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:29.380 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:29.386 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:29.447 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:29.450 +07:00 [INF] Creating schedule
2024-10-11 12:16:29.469 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:29.489 +07:00 [ERR] Failed executing DbCommand (2ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:29.511 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:29.517 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 129.5397ms
2024-10-11 12:16:29.518 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:29.525 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 147.0994ms
2024-10-11 12:16:30.493 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:30.494 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:30.494 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.495 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:30.499 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:30.500 +07:00 [INF] Creating schedule
2024-10-11 12:16:30.503 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:30.506 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:30.508 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:30.513 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 16.5286ms
2024-10-11 12:16:30.514 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.516 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 22.8917ms
2024-10-11 12:16:30.720 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:30.721 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:30.722 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.722 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:30.726 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:30.727 +07:00 [INF] Creating schedule
2024-10-11 12:16:30.729 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:30.732 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:30.735 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:30.739 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 15.312ms
2024-10-11 12:16:30.740 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.741 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 20.9878ms
2024-10-11 12:16:30.916 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:30.916 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:30.917 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.918 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:30.920 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:30.921 +07:00 [INF] Creating schedule
2024-10-11 12:16:30.924 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:30.926 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:30.928 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:30.932 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 12.4954ms
2024-10-11 12:16:30.933 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:30.934 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 18.3962ms
2024-10-11 12:16:31.121 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:31.122 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:31.123 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:31.124 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:31.125 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:31.126 +07:00 [INF] Creating schedule
2024-10-11 12:16:31.129 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:31.131 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:31.134 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:31.139 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 13.7227ms
2024-10-11 12:16:31.140 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:31.141 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 19.3581ms
2024-10-11 12:16:32.387 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:32.388 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:32.388 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.389 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:32.391 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:32.392 +07:00 [INF] Creating schedule
2024-10-11 12:16:32.394 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:32.397 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:32.399 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:32.404 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 13.8832ms
2024-10-11 12:16:32.406 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.407 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 19.7734ms
2024-10-11 12:16:32.600 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:32.600 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:32.601 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.602 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:32.604 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:32.604 +07:00 [INF] Creating schedule
2024-10-11 12:16:32.607 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:32.609 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:32.611 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:32.616 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 12.5642ms
2024-10-11 12:16:32.617 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.618 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 18.0239ms
2024-10-11 12:16:32.818 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:32.819 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:32.820 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.821 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:32.823 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:32.823 +07:00 [INF] Creating schedule
2024-10-11 12:16:32.826 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:32.828 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:32.830 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:32.836 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 13.7444ms
2024-10-11 12:16:32.837 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:32.838 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 19.6459ms
2024-10-11 12:16:40.727 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:16:40.728 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:40.729 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.7812ms
2024-10-11 12:16:40.744 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 226
2024-10-11 12:16:40.745 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:40.746 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:40.747 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:40.750 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:40.751 +07:00 [INF] Creating schedule
2024-10-11 12:16:40.755 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:40.758 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:40.761 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:40.766 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 17.3794ms
2024-10-11 12:16:40.767 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:40.769 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 226 - 500 - application/json;+charset=utf-8 24.7856ms
2024-10-11 12:16:55.070 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:16:55.071 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:55.072 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.5572ms
2024-10-11 12:16:55.088 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:16:55.089 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:16:55.090 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:55.091 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:16:55.094 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:16:55.095 +07:00 [INF] Creating schedule
2024-10-11 12:16:55.099 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:16:55.102 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:16:55.106 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:16:55.113 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 19.6839ms
2024-10-11 12:16:55.114 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:16:55.116 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 27.3537ms
2024-10-11 12:17:14.193 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:17:14.194 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:17:14.195 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.7981ms
2024-10-11 12:17:14.211 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:17:14.211 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:17:14.212 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:17:14.213 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:17:14.215 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:17:14.216 +07:00 [INF] Creating schedule
2024-10-11 12:17:14.220 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:17:14.223 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:17:14.226 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:17:14.230 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 16.1679ms
2024-10-11 12:17:14.231 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:17:14.232 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 21.7700ms
2024-10-11 12:19:09.282 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:19:09.283 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:09.284 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 2.5369ms
2024-10-11 12:19:09.338 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:19:09.339 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:09.339 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:09.340 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:19:09.342 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:19:09.343 +07:00 [INF] Creating schedule
2024-10-11 12:19:09.345 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:19:09.347 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:19:09.349 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:19:09.355 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 13.2869ms
2024-10-11 12:19:09.356 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:09.357 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 19.4750ms
2024-10-11 12:19:20.299 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:19:20.300 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:20.300 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.6997ms
2024-10-11 12:19:20.320 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:19:20.321 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:20.322 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:20.324 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:19:20.326 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:19:20.327 +07:00 [INF] Creating schedule
2024-10-11 12:19:20.331 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:19:20.335 +07:00 [ERR] Failed executing DbCommand (2ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:19:20.338 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:19:20.344 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 18.2515ms
2024-10-11 12:19:20.345 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:20.346 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 25.5092ms
2024-10-11 12:19:26.900 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:19:26.901 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:26.902 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.8696ms
2024-10-11 12:19:26.951 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:19:26.952 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:19:26.953 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:26.954 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:19:26.956 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:19:26.957 +07:00 [INF] Creating schedule
2024-10-11 12:19:26.993 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:19:26.995 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:19:26.997 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:19:27.002 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 46.8159ms
2024-10-11 12:19:27.003 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:19:27.004 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 52.5830ms
2024-10-11 12:20:12.945 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:20:12.946 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:20:12.947 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.8782ms
2024-10-11 12:20:12.960 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:20:12.961 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:20:12.962 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:20:12.963 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:20:12.965 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:20:12.966 +07:00 [INF] Creating schedule
2024-10-11 12:20:12.968 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:20:12.971 +07:00 [ERR] Failed executing DbCommand (0ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__startTime_Date_1
2024-10-11 12:20:12.973 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:20:12.977 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 13.2135ms
2024-10-11 12:20:12.978 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:20:12.979 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 18.9544ms
2024-10-11 12:20:55.612 +07:00 [INF] Application is shutting down...
2024-10-11 12:21:01.318 +07:00 [INF] Executed DbCommand (43ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 12:21:01.549 +07:00 [INF] Executed DbCommand (127ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 12:21:02.767 +07:00 [INF] Executed DbCommand (435ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 12:21:03.276 +07:00 [INF] Executed DbCommand (71ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 12:21:03.284 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 12:21:03.297 +07:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 12:21:03.303 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 12:21:03.306 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 12:21:03.309 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 12:21:03.312 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 12:21:03.316 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 12:21:03.319 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 12:21:03.328 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 12:21:03.415 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 12:21:03.463 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 12:21:03.466 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 12:21:03.467 +07:00 [INF] Hosting environment: Development
2024-10-11 12:21:03.468 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 12:21:08.121 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:21:08.218 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:08.344 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:21:08.372 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:21:08.395 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:21:08.401 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:08.404 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:21:08.405 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:21:08.602 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:08.602 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:08.606 +07:00 [INF] Getting all doctors
2024-10-11 12:21:08.606 +07:00 [INF] Getting all doctors
2024-10-11 12:21:08.706 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 12:21:08.709 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:08.711 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:21:08.727 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:21:08.751 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:08.753 +07:00 [INF] Getting doctor
2024-10-11 12:21:08.948 +07:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:21:09.040 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:21:09.047 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:21:09.047 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:21:09.054 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 445.8262ms.
2024-10-11 12:21:09.054 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 444.7982ms.
2024-10-11 12:21:09.061 +07:00 [INF] Executed DbCommand (15ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:21:09.067 +07:00 [INF] Getting doctor successfully
2024-10-11 12:21:09.067 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 314.9746ms.
2024-10-11 12:21:09.071 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 12:21:09.071 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:21:09.071 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:21:09.230 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 818.5607ms
2024-10-11 12:21:09.230 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 496.9328ms
2024-10-11 12:21:09.230 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 851.3401ms
2024-10-11 12:21:09.232 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:21:09.232 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:21:09.233 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:21:09.247 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 0 - application/json;+charset=utf-8 1132.0520ms
2024-10-11 12:21:09.247 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 540.3701ms
2024-10-11 12:21:09.247 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 851.7909ms
2024-10-11 12:21:28.984 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:21:28.985 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:28.988 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 3.7769ms
2024-10-11 12:21:29.003 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:21:29.004 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:29.004 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:29.009 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:21:29.069 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:29.071 +07:00 [INF] Creating schedule
2024-10-11 12:21:29.090 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:21:29.093 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 82.789ms
2024-10-11 12:21:29.094 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:29.102 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 400 - application/json;+charset=utf-8 99.0467ms
2024-10-11 12:21:36.821 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:21:36.822 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:36.823 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.9007ms
2024-10-11 12:21:36.834 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:21:36.836 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:36.836 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:36.838 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:21:36.841 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:36.842 +07:00 [INF] Creating schedule
2024-10-11 12:21:36.847 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:21:36.849 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 10.4069ms
2024-10-11 12:21:36.850 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:36.852 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 400 - application/json;+charset=utf-8 17.0441ms
2024-10-11 12:21:50.481 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:21:50.482 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:50.483 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 1.4811ms
2024-10-11 12:21:50.494 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:21:50.495 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:21:50.495 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:50.496 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:21:50.499 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:21:50.500 +07:00 [INF] Creating schedule
2024-10-11 12:21:50.503 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:21:50.692 +07:00 [INF] Executed DbCommand (50ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:21:50.767 +07:00 [INF] Executed DbCommand (10ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
2024-10-11 12:21:50.784 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:21:50.793 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
2024-10-11 12:21:50.798 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:21:50.802 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
2024-10-11 12:21:50.808 +07:00 [INF] Created schedule
2024-10-11 12:21:50.809 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 308.5506ms.
2024-10-11 12:21:50.810 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:21:50.818 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 320.4315ms
2024-10-11 12:21:50.819 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:21:50.820 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 200 - application/json;+charset=utf-8 326.3437ms
2024-10-11 12:22:57.160 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:22:57.161 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:22:57.162 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:22:57.163 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:22:57.165 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:22:57.166 +07:00 [INF] Getting all doctors
2024-10-11 12:22:57.171 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:22:57.175 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:22:57.176 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 9.559ms.
2024-10-11 12:22:57.177 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:22:57.178 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 13.6552ms
2024-10-11 12:22:57.179 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:22:57.181 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 20.9103ms
2024-10-11 12:23:04.327 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:23:04.328 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:04.329 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:23:04.330 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:23:04.332 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:04.333 +07:00 [INF] Getting all doctors
2024-10-11 12:23:04.341 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:23:04.349 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:23:04.349 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 16.3278ms.
2024-10-11 12:23:04.351 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:04.352 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 20.7262ms
2024-10-11 12:23:04.355 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:23:04.357 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 30.3523ms
2024-10-11 12:23:04.577 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/patient/patient1 - -
2024-10-11 12:23:04.578 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:04.578 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 12:23:04.583 +07:00 [INF] Route matched with {action = "GetPatientByLogin", controller = "Patient"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.Patient.PatientResponse] GetPatientByLoginAsync(System.String) on controller MedTimeSlot.Api.Controllers.PatientController (MedTimeSlot.Api).
2024-10-11 12:23:04.586 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:04.588 +07:00 [INF] Getting patient by login
2024-10-11 12:23:04.603 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE lower(p."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:23:04.617 +07:00 [INF] Retrieved patient
2024-10-11 12:23:04.617 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 30.2888ms.
2024-10-11 12:23:04.618 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.Patient.PatientResponse'.
2024-10-11 12:23:04.623 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) in 38.4651ms
2024-10-11 12:23:04.624 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 12:23:04.625 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/patient/patient1 - - - 200 - application/json;+charset=utf-8 48.1113ms
2024-10-11 12:23:06.954 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:23:06.955 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:06.956 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:23:06.957 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:23:06.959 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:06.960 +07:00 [INF] Getting all doctors
2024-10-11 12:23:06.962 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:23:06.965 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:23:06.965 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.1261ms.
2024-10-11 12:23:06.967 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:06.968 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 9.153ms
2024-10-11 12:23:06.969 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:23:06.970 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 15.9179ms
2024-10-11 12:23:07.085 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/patient/patient1 - -
2024-10-11 12:23:07.086 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:07.088 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 12:23:07.089 +07:00 [INF] Route matched with {action = "GetPatientByLogin", controller = "Patient"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.Patient.PatientResponse] GetPatientByLoginAsync(System.String) on controller MedTimeSlot.Api.Controllers.PatientController (MedTimeSlot.Api).
2024-10-11 12:23:07.093 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:07.094 +07:00 [INF] Getting patient by login
2024-10-11 12:23:07.099 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE lower(p."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:23:07.101 +07:00 [INF] Retrieved patient
2024-10-11 12:23:07.102 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 7.6366ms.
2024-10-11 12:23:07.104 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.Patient.PatientResponse'.
2024-10-11 12:23:07.105 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api) in 13.8235ms
2024-10-11 12:23:07.107 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.PatientController.GetPatientByLoginAsync (MedTimeSlot.Api)'
2024-10-11 12:23:07.108 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/patient/patient1 - - - 200 - application/json;+charset=utf-8 23.4103ms
2024-10-11 12:23:10.567 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/schedule/1 - -
2024-10-11 12:23:10.568 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:10.569 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetAllSchedules (MedTimeSlot.Api)'
2024-10-11 12:23:10.575 +07:00 [INF] Route matched with {action = "GetAllSchedules", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.Schedule.ScheduleResponse]] GetAllSchedules(Int32) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:23:10.577 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.GetAllSchedules (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:10.579 +07:00 [INF] Getting all schedules
2024-10-11 12:23:10.583 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:10.592 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__doctorId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__doctorId_0
2024-10-11 12:23:10.600 +07:00 [INF] Retrieved all schedules
2024-10-11 12:23:10.601 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.ScheduleController.GetAllSchedules (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 23.0891ms.
2024-10-11 12:23:10.602 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.Schedule.ScheduleResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:10.604 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.GetAllSchedules (MedTimeSlot.Api) in 27.6674ms
2024-10-11 12:23:10.605 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetAllSchedules (MedTimeSlot.Api)'
2024-10-11 12:23:10.606 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/schedule/1 - - - 200 - application/json;+charset=utf-8 38.9671ms
2024-10-11 12:23:30.742 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/Schedule?idDoctor=1&Date=2024-10-11T19:21:00.000Z - -
2024-10-11 12:23:30.743 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:30.743 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api)'
2024-10-11 12:23:30.752 +07:00 [INF] Route matched with {action = "GetCellTimeByDate", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] GetCellTimeByDate(MedTimeSlot.Api.DTOs.Schedule.GetScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:23:30.763 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:30.765 +07:00 [INF] Getting cell time by date
2024-10-11 12:23:30.769 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:30.772 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__doctorId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__doctorId_0
2024-10-11 12:23:30.794 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:30.798 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:30.801 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:30.803 +07:00 [INF] Retrieved cell time by date
2024-10-11 12:23:30.804 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 39.9627ms.
2024-10-11 12:23:30.805 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:30.806 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api) in 52.8511ms
2024-10-11 12:23:30.807 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api)'
2024-10-11 12:23:30.808 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/Schedule?idDoctor=1&Date=2024-10-11T19:21:00.000Z - - - 200 - application/json;+charset=utf-8 66.4220ms
2024-10-11 12:23:37.529 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/Schedule?idDoctor=1&Date=2024-10-11T19:21:00.000Z - -
2024-10-11 12:23:37.530 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:37.531 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api)'
2024-10-11 12:23:37.532 +07:00 [INF] Route matched with {action = "GetCellTimeByDate", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] GetCellTimeByDate(MedTimeSlot.Api.DTOs.Schedule.GetScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:23:37.535 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:37.536 +07:00 [INF] Getting cell time by date
2024-10-11 12:23:37.539 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:37.541 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Appointment - -
2024-10-11 12:23:37.541 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/Appointment/1 - -
2024-10-11 12:23:37.542 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:37.542 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__doctorId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__doctorId_0
2024-10-11 12:23:37.542 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:37.543 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Appointment - - - 204 - - 1.9705ms
2024-10-11 12:23:37.545 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api)'
2024-10-11 12:23:37.546 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:37.551 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:37.552 +07:00 [INF] Route matched with {action = "GetAppointmentsByPatient", controller = "Appointment"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] GetAppointmentsByPatient(Int32) on controller MedTimeSlot.Api.Controllers.AppointmentController (MedTimeSlot.Api).
2024-10-11 12:23:37.557 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__schedule_Id_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__schedule_Id_0 AND date_trunc('day', c."Time" AT TIME ZONE 'UTC') = @__ToUniversalTime_1 AND (c."PatientId" IS NULL)
2024-10-11 12:23:37.558 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Appointment application/json 74
2024-10-11 12:23:37.558 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:37.560 +07:00 [INF] Retrieved cell time by date
2024-10-11 12:23:37.560 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:37.562 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 25.4438ms.
2024-10-11 12:23:37.562 +07:00 [INF] Getting appointments by Patient
2024-10-11 12:23:37.562 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.CreateAppointment (MedTimeSlot.Api)'
2024-10-11 12:23:37.564 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:37.566 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api) in 31.5321ms
2024-10-11 12:23:37.567 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.GetCellTimeByDate (MedTimeSlot.Api)'
2024-10-11 12:23:37.568 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/Schedule?idDoctor=1&Date=2024-10-11T19:21:00.000Z - - - 200 - application/json;+charset=utf-8 39.3422ms
2024-10-11 12:23:37.569 +07:00 [INF] Route matched with {action = "CreateAppointment", controller = "Appointment"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse] CreateAppointment(MedTimeSlot.Api.DTOs.Appointment.CreateAppointmentRequest) on controller MedTimeSlot.Api.Controllers.AppointmentController (MedTimeSlot.Api).
2024-10-11 12:23:37.574 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE p."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:37.581 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__patient_Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."PatientId" = @__patient_Id_0
2024-10-11 12:23:37.582 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.AppointmentController.CreateAppointment (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:37.584 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 22.647ms.
2024-10-11 12:23:37.586 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:37.586 +07:00 [INF] Creating new appointment
2024-10-11 12:23:37.588 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api) in 30.7132ms
2024-10-11 12:23:37.589 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api)'
2024-10-11 12:23:37.590 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/Appointment/1 - - - 200 - application/json;+charset=utf-8 48.8934ms
2024-10-11 12:23:37.594 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE p."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:37.599 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:37.612 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0
LIMIT 1
2024-10-11 12:23:37.617 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__First_Id_0='?' (DbType = Int32), @__appointmentDate_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."ScheduleId" = @__First_Id_0 AND c."Time" = @__appointmentDate_1 AND (c."PatientId" IS NULL)
LIMIT 1
2024-10-11 12:23:37.637 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@p3='?' (DbType = Int32), @p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
UPDATE "CellTimes" SET "PatientId" = @p0, "ScheduleId" = @p1, "Time" = @p2
WHERE "Id" = @p3;
2024-10-11 12:23:37.646 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.AppointmentController.CreateAppointment (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 62.1468ms.
2024-10-11 12:23:37.648 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse'.
2024-10-11 12:23:37.649 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.AppointmentController.CreateAppointment (MedTimeSlot.Api) in 77.3816ms
2024-10-11 12:23:37.650 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.CreateAppointment (MedTimeSlot.Api)'
2024-10-11 12:23:37.651 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Appointment application/json 74 - 200 - application/json;+charset=utf-8 93.3923ms
2024-10-11 12:23:40.578 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/Appointment/1 - -
2024-10-11 12:23:40.579 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:23:40.580 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api)'
2024-10-11 12:23:40.581 +07:00 [INF] Route matched with {action = "GetAppointmentsByPatient", controller = "Appointment"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] GetAppointmentsByPatient(Int32) on controller MedTimeSlot.Api.Controllers.AppointmentController (MedTimeSlot.Api).
2024-10-11 12:23:40.584 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:23:40.585 +07:00 [INF] Getting appointments by Patient
2024-10-11 12:23:40.588 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT p."Id", p."Age", p."FirstName", p."LastName", p."Login"
FROM "Patients" AS p
WHERE p."Id" = @__p_0
LIMIT 1
2024-10-11 12:23:40.590 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[@__patient_Id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT c."Id", c."PatientId", c."ScheduleId", c."Time"
FROM "CellTimes" AS c
WHERE c."PatientId" = @__patient_Id_0
2024-10-11 12:23:40.592 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 7.4906ms.
2024-10-11 12:23:40.594 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:23:40.594 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api) in 12.1918ms
2024-10-11 12:23:40.595 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.AppointmentController.GetAppointmentsByPatient (MedTimeSlot.Api)'
2024-10-11 12:23:40.596 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/Appointment/1 - - - 200 - application/json;+charset=utf-8 18.1569ms
2024-10-11 12:26:21.568 +07:00 [INF] Application is shutting down...
2024-10-11 12:26:27.424 +07:00 [INF] Executed DbCommand (46ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 12:26:27.691 +07:00 [INF] Executed DbCommand (172ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 12:26:28.349 +07:00 [INF] Executed DbCommand (434ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 12:26:28.844 +07:00 [INF] Executed DbCommand (53ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 12:26:28.852 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 12:26:28.866 +07:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 12:26:28.872 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 12:26:28.876 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 12:26:28.880 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 12:26:28.884 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 12:26:28.887 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 12:26:28.891 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 12:26:28.900 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 12:26:29.004 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 12:26:29.053 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 12:26:29.057 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 12:26:29.058 +07:00 [INF] Hosting environment: Development
2024-10-11 12:26:29.058 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 12:26:33.606 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:26:33.705 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:33.747 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:26:33.767 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:26:33.816 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 12:26:33.821 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:33.825 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:26:33.842 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:26:33.938 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:26:33.941 +07:00 [INF] Getting all doctors
2024-10-11 12:26:33.946 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:26:33.948 +07:00 [INF] Getting doctor
2024-10-11 12:26:34.181 +07:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:26:34.266 +07:00 [INF] Executed DbCommand (23ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:26:34.267 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:26:34.272 +07:00 [INF] Getting doctor successfully
2024-10-11 12:26:34.274 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 325.0362ms.
2024-10-11 12:26:34.274 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 330.1718ms.
2024-10-11 12:26:34.291 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 12:26:34.291 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:26:34.433 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 660.2665ms
2024-10-11 12:26:34.433 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 585.5405ms
2024-10-11 12:26:34.435 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:26:34.435 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:26:34.445 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - -
2024-10-11 12:26:34.445 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/doctor - -
2024-10-11 12:26:34.447 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:34.447 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:34.450 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:26:34.450 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:26:34.450 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 633.7884ms
2024-10-11 12:26:34.450 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 849.5096ms
2024-10-11 12:26:34.451 +07:00 [INF] Route matched with {action = "GetAllDoctors", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.DoctorResponse]] GetAllDoctorsAsync() on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:26:34.452 +07:00 [INF] Route matched with {action = "GetDoctor", controller = "Doctor"}. Executing controller action with signature System.Threading.Tasks.Task`1[MedTimeSlot.Api.DTOs.DoctorResponse] GetDoctor(System.String) on controller MedTimeSlot.Api.Controllers.DoctorController (MedTimeSlot.Api).
2024-10-11 12:26:34.458 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:26:34.459 +07:00 [INF] Getting all doctors
2024-10-11 12:26:34.460 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:26:34.461 +07:00 [INF] Getting doctor
2024-10-11 12:26:34.463 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
2024-10-11 12:26:34.465 +07:00 [INF] Getting all doctors successfully
2024-10-11 12:26:34.465 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 5.8175ms.
2024-10-11 12:26:34.466 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ToLower_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE lower(d."Login") = @__ToLower_0
LIMIT 1
2024-10-11 12:26:34.467 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.DoctorResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:26:34.468 +07:00 [INF] Getting doctor successfully
2024-10-11 12:26:34.469 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api) in 14.3546ms
2024-10-11 12:26:34.469 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 8.4529ms.
2024-10-11 12:26:34.470 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetAllDoctorsAsync (MedTimeSlot.Api)'
2024-10-11 12:26:34.472 +07:00 [INF] Executing ObjectResult, writing value of type 'MedTimeSlot.Api.DTOs.DoctorResponse'.
2024-10-11 12:26:34.473 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor - - - 200 - application/json;+charset=utf-8 27.7034ms
2024-10-11 12:26:34.474 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api) in 17.1906ms
2024-10-11 12:26:34.475 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.DoctorController.GetDoctor (MedTimeSlot.Api)'
2024-10-11 12:26:34.476 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/doctor/doctor1 - - - 200 - application/json;+charset=utf-8 30.9002ms
2024-10-11 12:26:58.582 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:26:58.582 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:58.584 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 2.7578ms
2024-10-11 12:26:58.616 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:26:58.616 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:26:58.617 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:26:58.622 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:26:58.679 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:26:58.681 +07:00 [INF] Creating schedule
2024-10-11 12:26:58.701 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:26:58.720 +07:00 [ERR] Failed executing DbCommand (2ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__startTime_Date_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC')::timestamptz = @__startTime_Date_1
2024-10-11 12:26:58.739 +07:00 [ERR] An exception occurred while iterating over the results of a query for context type 'MedTimeSlot.DataAccess.DataAccess.MedicalTimeSlotDbContext'.
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidCastException: Cannot write DateTime with Kind=Unspecified to PostgreSQL type 'timestamp with time zone', only UTC is supported. Note that it's not possible to mix DateTimes with different Kinds in an array/range. See the Npgsql.EnableLegacyTimestampBehavior AppContext switch to enable legacy behavior.
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateAndGetLength(DateTime value, NpgsqlParameter parameter)
   at Npgsql.Internal.TypeHandlers.DateTimeHandlers.TimestampTzHandler.ValidateObjectAndGetLength(Object value, NpgsqlLengthCache& lengthCache, NpgsqlParameter parameter)
   at Npgsql.NpgsqlParameter.ValidateAndGetLength()
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(TypeMapper typeMapper, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2024-10-11 12:26:58.745 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 122.4201ms
2024-10-11 12:26:58.746 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:26:58.754 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 500 - application/json;+charset=utf-8 138.4729ms
2024-10-11 12:27:32.498 +07:00 [INF] Application is shutting down...
2024-10-11 12:27:37.819 +07:00 [INF] Executed DbCommand (36ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 12:27:38.004 +07:00 [INF] Executed DbCommand (109ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 12:27:38.498 +07:00 [INF] Executed DbCommand (353ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 12:27:38.990 +07:00 [INF] Executed DbCommand (49ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 12:27:38.997 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 12:27:39.008 +07:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 12:27:39.014 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 12:27:39.017 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 12:27:39.019 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 12:27:39.023 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 12:27:39.027 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 12:27:39.030 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 12:27:39.039 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 12:27:39.125 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 12:27:39.173 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 12:27:39.176 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 12:27:39.177 +07:00 [INF] Hosting environment: Development
2024-10-11 12:27:39.178 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 12:27:40.752 +07:00 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5080/Schedule - -
2024-10-11 12:27:40.800 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:27:40.807 +07:00 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5080/Schedule - - - 204 - - 56.6147ms
2024-10-11 12:27:40.822 +07:00 [INF] Request starting HTTP/1.1 POST http://localhost:5080/Schedule application/json 225
2024-10-11 12:27:40.825 +07:00 [INF] CORS policy execution successful.
2024-10-11 12:27:40.862 +07:00 [INF] Executing endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:27:40.886 +07:00 [INF] Route matched with {action = "CreateBaseSchedule", controller = "Schedule"}. Executing controller action with signature System.Threading.Tasks.Task`1[System.Collections.Generic.List`1[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse]] CreateBaseSchedule(MedTimeSlot.Api.DTOs.Schedule.CreateScheduleRequest) on controller MedTimeSlot.Api.Controllers.ScheduleController (MedTimeSlot.Api).
2024-10-11 12:27:41.173 +07:00 [INF] Executing action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) - Validation state: "Valid"
2024-10-11 12:27:41.176 +07:00 [INF] Creating schedule
2024-10-11 12:27:41.469 +07:00 [INF] Executed DbCommand (17ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT d."Id", d."Age", d."FirstName", d."LastName", d."Login", d."Speciality"
FROM "Doctors" AS d
WHERE d."Id" = @__p_0
LIMIT 1
2024-10-11 12:27:41.556 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__idDoctor_0='?' (DbType = Int32), @__ToUniversalTime_1='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
SELECT s."Id", s."AppointmentDuration", s."DayOfWeek", s."DoctorId", s."EndLunchTime", s."EndTime", s."StartLunchTime", s."StartTime"
FROM "Schedules" AS s
WHERE s."DoctorId" = @__idDoctor_0 AND date_trunc('day', s."StartTime" AT TIME ZONE 'UTC') = @__ToUniversalTime_1
2024-10-11 12:27:41.711 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:27:41.781 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime), @p36='?' (DbType = Int32), @p37='?' (DbType = Int32), @p38='?' (DbType = DateTime), @p39='?' (DbType = Int32), @p40='?' (DbType = Int32), @p41='?' (DbType = DateTime), @p42='?' (DbType = Int32), @p43='?' (DbType = Int32), @p44='?' (DbType = DateTime), @p45='?' (DbType = Int32), @p46='?' (DbType = Int32), @p47='?' (DbType = DateTime), @p48='?' (DbType = Int32), @p49='?' (DbType = Int32), @p50='?' (DbType = DateTime), @p51='?' (DbType = Int32), @p52='?' (DbType = Int32), @p53='?' (DbType = DateTime), @p54='?' (DbType = Int32), @p55='?' (DbType = Int32), @p56='?' (DbType = DateTime), @p57='?' (DbType = Int32), @p58='?' (DbType = Int32), @p59='?' (DbType = DateTime), @p60='?' (DbType = Int32), @p61='?' (DbType = Int32), @p62='?' (DbType = DateTime), @p63='?' (DbType = Int32), @p64='?' (DbType = Int32), @p65='?' (DbType = DateTime), @p66='?' (DbType = Int32), @p67='?' (DbType = Int32), @p68='?' (DbType = DateTime), @p69='?' (DbType = Int32), @p70='?' (DbType = Int32), @p71='?' (DbType = DateTime), @p72='?' (DbType = Int32), @p73='?' (DbType = Int32), @p74='?' (DbType = DateTime), @p75='?' (DbType = Int32), @p76='?' (DbType = Int32), @p77='?' (DbType = DateTime), @p78='?' (DbType = Int32), @p79='?' (DbType = Int32), @p80='?' (DbType = DateTime), @p81='?' (DbType = Int32), @p82='?' (DbType = Int32), @p83='?' (DbType = DateTime), @p84='?' (DbType = Int32), @p85='?' (DbType = Int32), @p86='?' (DbType = DateTime), @p87='?' (DbType = Int32), @p88='?' (DbType = Int32), @p89='?' (DbType = DateTime), @p90='?' (DbType = Int32), @p91='?' (DbType = Int32), @p92='?' (DbType = DateTime), @p93='?' (DbType = Int32), @p94='?' (DbType = Int32), @p95='?' (DbType = DateTime), @p96='?' (DbType = Int32), @p97='?' (DbType = Int32), @p98='?' (DbType = DateTime), @p99='?' (DbType = Int32), @p100='?' (DbType = Int32), @p101='?' (DbType = DateTime), @p102='?' (DbType = Int32), @p103='?' (DbType = Int32), @p104='?' (DbType = DateTime), @p105='?' (DbType = Int32), @p106='?' (DbType = Int32), @p107='?' (DbType = DateTime), @p108='?' (DbType = Int32), @p109='?' (DbType = Int32), @p110='?' (DbType = DateTime), @p111='?' (DbType = Int32), @p112='?' (DbType = Int32), @p113='?' (DbType = DateTime), @p114='?' (DbType = Int32), @p115='?' (DbType = Int32), @p116='?' (DbType = DateTime), @p117='?' (DbType = Int32), @p118='?' (DbType = Int32), @p119='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p36, @p37, @p38)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p39, @p40, @p41)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p42, @p43, @p44)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p45, @p46, @p47)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p48, @p49, @p50)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p51, @p52, @p53)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p54, @p55, @p56)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p57, @p58, @p59)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p60, @p61, @p62)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p63, @p64, @p65)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p66, @p67, @p68)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p69, @p70, @p71)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p72, @p73, @p74)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p75, @p76, @p77)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p78, @p79, @p80)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p81, @p82, @p83)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p84, @p85, @p86)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p87, @p88, @p89)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p90, @p91, @p92)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p93, @p94, @p95)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p96, @p97, @p98)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p99, @p100, @p101)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p102, @p103, @p104)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p105, @p106, @p107)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p108, @p109, @p110)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p111, @p112, @p113)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p114, @p115, @p116)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p117, @p118, @p119)
RETURNING "Id";
2024-10-11 12:27:41.800 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:27:41.808 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime), @p36='?' (DbType = Int32), @p37='?' (DbType = Int32), @p38='?' (DbType = DateTime), @p39='?' (DbType = Int32), @p40='?' (DbType = Int32), @p41='?' (DbType = DateTime), @p42='?' (DbType = Int32), @p43='?' (DbType = Int32), @p44='?' (DbType = DateTime), @p45='?' (DbType = Int32), @p46='?' (DbType = Int32), @p47='?' (DbType = DateTime), @p48='?' (DbType = Int32), @p49='?' (DbType = Int32), @p50='?' (DbType = DateTime), @p51='?' (DbType = Int32), @p52='?' (DbType = Int32), @p53='?' (DbType = DateTime), @p54='?' (DbType = Int32), @p55='?' (DbType = Int32), @p56='?' (DbType = DateTime), @p57='?' (DbType = Int32), @p58='?' (DbType = Int32), @p59='?' (DbType = DateTime), @p60='?' (DbType = Int32), @p61='?' (DbType = Int32), @p62='?' (DbType = DateTime), @p63='?' (DbType = Int32), @p64='?' (DbType = Int32), @p65='?' (DbType = DateTime), @p66='?' (DbType = Int32), @p67='?' (DbType = Int32), @p68='?' (DbType = DateTime), @p69='?' (DbType = Int32), @p70='?' (DbType = Int32), @p71='?' (DbType = DateTime), @p72='?' (DbType = Int32), @p73='?' (DbType = Int32), @p74='?' (DbType = DateTime), @p75='?' (DbType = Int32), @p76='?' (DbType = Int32), @p77='?' (DbType = DateTime), @p78='?' (DbType = Int32), @p79='?' (DbType = Int32), @p80='?' (DbType = DateTime), @p81='?' (DbType = Int32), @p82='?' (DbType = Int32), @p83='?' (DbType = DateTime), @p84='?' (DbType = Int32), @p85='?' (DbType = Int32), @p86='?' (DbType = DateTime), @p87='?' (DbType = Int32), @p88='?' (DbType = Int32), @p89='?' (DbType = DateTime), @p90='?' (DbType = Int32), @p91='?' (DbType = Int32), @p92='?' (DbType = DateTime), @p93='?' (DbType = Int32), @p94='?' (DbType = Int32), @p95='?' (DbType = DateTime), @p96='?' (DbType = Int32), @p97='?' (DbType = Int32), @p98='?' (DbType = DateTime), @p99='?' (DbType = Int32), @p100='?' (DbType = Int32), @p101='?' (DbType = DateTime), @p102='?' (DbType = Int32), @p103='?' (DbType = Int32), @p104='?' (DbType = DateTime), @p105='?' (DbType = Int32), @p106='?' (DbType = Int32), @p107='?' (DbType = DateTime), @p108='?' (DbType = Int32), @p109='?' (DbType = Int32), @p110='?' (DbType = DateTime), @p111='?' (DbType = Int32), @p112='?' (DbType = Int32), @p113='?' (DbType = DateTime), @p114='?' (DbType = Int32), @p115='?' (DbType = Int32), @p116='?' (DbType = DateTime), @p117='?' (DbType = Int32), @p118='?' (DbType = Int32), @p119='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p36, @p37, @p38)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p39, @p40, @p41)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p42, @p43, @p44)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p45, @p46, @p47)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p48, @p49, @p50)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p51, @p52, @p53)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p54, @p55, @p56)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p57, @p58, @p59)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p60, @p61, @p62)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p63, @p64, @p65)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p66, @p67, @p68)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p69, @p70, @p71)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p72, @p73, @p74)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p75, @p76, @p77)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p78, @p79, @p80)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p81, @p82, @p83)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p84, @p85, @p86)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p87, @p88, @p89)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p90, @p91, @p92)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p93, @p94, @p95)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p96, @p97, @p98)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p99, @p100, @p101)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p102, @p103, @p104)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p105, @p106, @p107)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p108, @p109, @p110)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p111, @p112, @p113)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p114, @p115, @p116)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p117, @p118, @p119)
RETURNING "Id";
2024-10-11 12:27:41.815 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='?' (DbType = Object), @p1='?' (DbType = Int32), @p2='?' (DbType = Int32), @p3='?' (DbType = DateTime), @p4='?' (DbType = DateTime), @p5='?' (DbType = DateTime), @p6='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Schedules" ("AppointmentDuration", "DayOfWeek", "DoctorId", "EndLunchTime", "EndTime", "StartLunchTime", "StartTime")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6)
RETURNING "Id";
2024-10-11 12:27:41.821 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?' (DbType = DateTime), @p3='?' (DbType = Int32), @p4='?' (DbType = Int32), @p5='?' (DbType = DateTime), @p6='?' (DbType = Int32), @p7='?' (DbType = Int32), @p8='?' (DbType = DateTime), @p9='?' (DbType = Int32), @p10='?' (DbType = Int32), @p11='?' (DbType = DateTime), @p12='?' (DbType = Int32), @p13='?' (DbType = Int32), @p14='?' (DbType = DateTime), @p15='?' (DbType = Int32), @p16='?' (DbType = Int32), @p17='?' (DbType = DateTime), @p18='?' (DbType = Int32), @p19='?' (DbType = Int32), @p20='?' (DbType = DateTime), @p21='?' (DbType = Int32), @p22='?' (DbType = Int32), @p23='?' (DbType = DateTime), @p24='?' (DbType = Int32), @p25='?' (DbType = Int32), @p26='?' (DbType = DateTime), @p27='?' (DbType = Int32), @p28='?' (DbType = Int32), @p29='?' (DbType = DateTime), @p30='?' (DbType = Int32), @p31='?' (DbType = Int32), @p32='?' (DbType = DateTime), @p33='?' (DbType = Int32), @p34='?' (DbType = Int32), @p35='?' (DbType = DateTime), @p36='?' (DbType = Int32), @p37='?' (DbType = Int32), @p38='?' (DbType = DateTime), @p39='?' (DbType = Int32), @p40='?' (DbType = Int32), @p41='?' (DbType = DateTime), @p42='?' (DbType = Int32), @p43='?' (DbType = Int32), @p44='?' (DbType = DateTime), @p45='?' (DbType = Int32), @p46='?' (DbType = Int32), @p47='?' (DbType = DateTime), @p48='?' (DbType = Int32), @p49='?' (DbType = Int32), @p50='?' (DbType = DateTime), @p51='?' (DbType = Int32), @p52='?' (DbType = Int32), @p53='?' (DbType = DateTime), @p54='?' (DbType = Int32), @p55='?' (DbType = Int32), @p56='?' (DbType = DateTime), @p57='?' (DbType = Int32), @p58='?' (DbType = Int32), @p59='?' (DbType = DateTime), @p60='?' (DbType = Int32), @p61='?' (DbType = Int32), @p62='?' (DbType = DateTime), @p63='?' (DbType = Int32), @p64='?' (DbType = Int32), @p65='?' (DbType = DateTime), @p66='?' (DbType = Int32), @p67='?' (DbType = Int32), @p68='?' (DbType = DateTime), @p69='?' (DbType = Int32), @p70='?' (DbType = Int32), @p71='?' (DbType = DateTime), @p72='?' (DbType = Int32), @p73='?' (DbType = Int32), @p74='?' (DbType = DateTime), @p75='?' (DbType = Int32), @p76='?' (DbType = Int32), @p77='?' (DbType = DateTime), @p78='?' (DbType = Int32), @p79='?' (DbType = Int32), @p80='?' (DbType = DateTime), @p81='?' (DbType = Int32), @p82='?' (DbType = Int32), @p83='?' (DbType = DateTime), @p84='?' (DbType = Int32), @p85='?' (DbType = Int32), @p86='?' (DbType = DateTime), @p87='?' (DbType = Int32), @p88='?' (DbType = Int32), @p89='?' (DbType = DateTime), @p90='?' (DbType = Int32), @p91='?' (DbType = Int32), @p92='?' (DbType = DateTime), @p93='?' (DbType = Int32), @p94='?' (DbType = Int32), @p95='?' (DbType = DateTime), @p96='?' (DbType = Int32), @p97='?' (DbType = Int32), @p98='?' (DbType = DateTime), @p99='?' (DbType = Int32), @p100='?' (DbType = Int32), @p101='?' (DbType = DateTime), @p102='?' (DbType = Int32), @p103='?' (DbType = Int32), @p104='?' (DbType = DateTime), @p105='?' (DbType = Int32), @p106='?' (DbType = Int32), @p107='?' (DbType = DateTime), @p108='?' (DbType = Int32), @p109='?' (DbType = Int32), @p110='?' (DbType = DateTime), @p111='?' (DbType = Int32), @p112='?' (DbType = Int32), @p113='?' (DbType = DateTime), @p114='?' (DbType = Int32), @p115='?' (DbType = Int32), @p116='?' (DbType = DateTime), @p117='?' (DbType = Int32), @p118='?' (DbType = Int32), @p119='?' (DbType = DateTime)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p0, @p1, @p2)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p3, @p4, @p5)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p6, @p7, @p8)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p9, @p10, @p11)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p12, @p13, @p14)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p15, @p16, @p17)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p18, @p19, @p20)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p21, @p22, @p23)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p24, @p25, @p26)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p27, @p28, @p29)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p30, @p31, @p32)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p33, @p34, @p35)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p36, @p37, @p38)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p39, @p40, @p41)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p42, @p43, @p44)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p45, @p46, @p47)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p48, @p49, @p50)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p51, @p52, @p53)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p54, @p55, @p56)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p57, @p58, @p59)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p60, @p61, @p62)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p63, @p64, @p65)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p66, @p67, @p68)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p69, @p70, @p71)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p72, @p73, @p74)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p75, @p76, @p77)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p78, @p79, @p80)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p81, @p82, @p83)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p84, @p85, @p86)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p87, @p88, @p89)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p90, @p91, @p92)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p93, @p94, @p95)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p96, @p97, @p98)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p99, @p100, @p101)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p102, @p103, @p104)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p105, @p106, @p107)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p108, @p109, @p110)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p111, @p112, @p113)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p114, @p115, @p116)
RETURNING "Id";
INSERT INTO "CellTimes" ("PatientId", "ScheduleId", "Time")
VALUES (@p117, @p118, @p119)
RETURNING "Id";
2024-10-11 12:27:41.843 +07:00 [INF] Created schedule
2024-10-11 12:27:41.850 +07:00 [INF] Executed action method MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 671.8777ms.
2024-10-11 12:27:41.866 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[MedTimeSlot.Api.DTOs.CellTime.CellTImeResponse, MedTimeSlot.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-10-11 12:27:41.904 +07:00 [INF] Executed action MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api) in 1012.917ms
2024-10-11 12:27:41.906 +07:00 [INF] Executed endpoint 'MedTimeSlot.Api.Controllers.ScheduleController.CreateBaseSchedule (MedTimeSlot.Api)'
2024-10-11 12:27:41.917 +07:00 [INF] Request finished HTTP/1.1 POST http://localhost:5080/Schedule application/json 225 - 200 - application/json;+charset=utf-8 1095.5049ms
2024-10-11 12:27:54.823 +07:00 [INF] Application is shutting down...
2024-10-11 12:27:59.983 +07:00 [INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 12:28:00.178 +07:00 [INF] Executed DbCommand (113ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 12:28:00.701 +07:00 [INF] Executed DbCommand (367ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 12:28:01.584 +07:00 [INF] Executed DbCommand (84ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 12:28:01.594 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 12:28:01.605 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 12:28:01.613 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 12:28:01.619 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 12:28:01.622 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 12:28:01.629 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 12:28:01.635 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 12:28:01.641 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 12:28:01.654 +07:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 12:28:01.844 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 12:28:01.920 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 12:28:01.923 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 12:28:01.924 +07:00 [INF] Hosting environment: Development
2024-10-11 12:28:01.925 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 13:09:47.258 +07:00 [INF] Application is shutting down...
2024-10-11 16:44:19.971 +07:00 [INF] Executed DbCommand (36ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT EXISTS (SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid=c.relnamespace WHERE c.relname='__EFMigrationsHistory');
2024-10-11 16:44:20.218 +07:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2024-10-11 16:44:20.253 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT EXISTS (SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid=c.relnamespace WHERE c.relname='__EFMigrationsHistory');
2024-10-11 16:44:20.258 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2024-10-11 16:44:20.279 +07:00 [INF] Applying migration '20241011065424_Initial'.
2024-10-11 16:44:20.361 +07:00 [ERR] Failed executing DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 16:45:16.518 +07:00 [INF] Executed DbCommand (43ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

SELECT CASE WHEN COUNT(*) = 0 THEN FALSE ELSE TRUE END
FROM pg_class AS cls
JOIN pg_namespace AS ns ON ns.oid = cls.relnamespace
WHERE
        cls.relkind IN ('r', 'v', 'm', 'f', 'p') AND
        ns.nspname NOT IN ('pg_catalog', 'information_schema') AND
        -- Exclude tables which are members of PG extensions
        NOT EXISTS (
            SELECT 1 FROM pg_depend WHERE
                classid=(
                    SELECT cls.oid
                    FROM pg_class AS cls
                             JOIN pg_namespace AS ns ON ns.oid = cls.relnamespace
                    WHERE relname='pg_class' AND ns.nspname='pg_catalog'
                ) AND
                objid=cls.oid AND
                deptype IN ('e', 'x')
        )
2024-10-11 16:45:16.686 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 16:45:16.745 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 16:45:16.748 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 16:45:16.749 +07:00 [INF] Hosting environment: Development
2024-10-11 16:45:16.750 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 16:45:19.179 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:45:19.343 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 165.8999ms
2024-10-11 16:45:29.230 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:45:29.234 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 4.2572ms
2024-10-11 16:46:23.539 +07:00 [INF] Application is shutting down...
2024-10-11 16:46:29.367 +07:00 [INF] Executed DbCommand (41ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
REVOKE CONNECT ON DATABASE "medTime" FROM PUBLIC;
SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'medTime';
2024-10-11 16:46:29.610 +07:00 [INF] Executed DbCommand (180ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
DROP DATABASE "medTime";
2024-10-11 16:46:30.325 +07:00 [INF] Executed DbCommand (575ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE DATABASE "medTime";
2024-10-11 16:46:31.415 +07:00 [INF] Executed DbCommand (51ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Doctors" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Speciality" text NOT NULL,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Doctors" PRIMARY KEY ("Id")
);
2024-10-11 16:46:31.424 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Patients" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Login" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Age" integer NOT NULL,
    CONSTRAINT "PK_Patients" PRIMARY KEY ("Id")
);
2024-10-11 16:46:31.433 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Schedules" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "DoctorId" integer NOT NULL,
    "DayOfWeek" integer NOT NULL,
    "StartTime" timestamp with time zone NOT NULL,
    "EndTime" timestamp with time zone NOT NULL,
    "AppointmentDuration" interval NOT NULL,
    "StartLunchTime" timestamp with time zone NOT NULL,
    "EndLunchTime" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Schedules" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Schedules_Doctors_DoctorId" FOREIGN KEY ("DoctorId") REFERENCES "Doctors" ("Id") ON DELETE CASCADE
);
2024-10-11 16:46:31.438 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "CellTimes" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Time" timestamp with time zone NOT NULL,
    "PatientId" integer NULL,
    "ScheduleId" integer NOT NULL,
    CONSTRAINT "PK_CellTimes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_CellTimes_Patients_PatientId" FOREIGN KEY ("PatientId") REFERENCES "Patients" ("Id"),
    CONSTRAINT "FK_CellTimes_Schedules_ScheduleId" FOREIGN KEY ("ScheduleId") REFERENCES "Schedules" ("Id") ON DELETE CASCADE
);
2024-10-11 16:46:31.442 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (1, 17, 'Tom', 'A', 'Doctor1', 'Therapist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (2, 23, 'Bob', 'B', 'Doctor2', 'Traumatologist');
INSERT INTO "Doctors" ("Id", "Age", "FirstName", "LastName", "Login", "Speciality")
VALUES (3, 42, 'Sam', 'C', 'Doctor3', 'Surgeon');
2024-10-11 16:46:31.445 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (1, 29, 'Tom', 'A', 'Patient1');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (2, 29, 'Bob', 'B', 'Patient2');
INSERT INTO "Patients" ("Id", "Age", "FirstName", "LastName", "Login")
VALUES (3, 29, 'Sam', 'C', 'Patient3');
2024-10-11 16:46:31.450 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_PatientId" ON "CellTimes" ("PatientId");
2024-10-11 16:46:31.453 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_CellTimes_ScheduleId" ON "CellTimes" ("ScheduleId");
2024-10-11 16:46:31.457 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Schedules_DoctorId" ON "Schedules" ("DoctorId");
2024-10-11 16:46:31.468 +07:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT setval(
    pg_get_serial_sequence('"Doctors"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Doctors") + 1,
        nextval(pg_get_serial_sequence('"Doctors"', 'Id'))),
    false);
SELECT setval(
    pg_get_serial_sequence('"Patients"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Patients") + 1,
        nextval(pg_get_serial_sequence('"Patients"', 'Id'))),
    false);
2024-10-11 16:46:31.568 +07:00 [INF] User profile is available. Using 'C:\Users\krasyukMA\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-10-11 16:46:31.620 +07:00 [INF] Now listening on: http://localhost:5080
2024-10-11 16:46:31.623 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-10-11 16:46:31.625 +07:00 [INF] Hosting environment: Development
2024-10-11 16:46:31.625 +07:00 [INF] Content root path: D:\RiderProject\MedTimeSlot.Api\MedTimeSlot.Api
2024-10-11 16:46:38.638 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:46:38.711 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 76.0480ms
2024-10-11 16:47:26.639 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:26.642 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 3.5009ms
2024-10-11 16:47:28.860 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:28.864 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 3.9850ms
2024-10-11 16:47:30.594 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:30.596 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.3220ms
2024-10-11 16:47:31.155 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:31.156 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.1638ms
2024-10-11 16:47:31.323 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:31.324 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.4315ms
2024-10-11 16:47:31.488 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:31.490 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.5624ms
2024-10-11 16:47:31.640 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:31.642 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.1280ms
2024-10-11 16:47:31.777 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:31.778 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.0791ms
2024-10-11 16:47:35.258 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:35.259 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.0589ms
2024-10-11 16:47:35.859 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/ - -
2024-10-11 16:47:35.860 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/ - - - 404 0 - 1.0934ms
2024-10-11 16:47:38.902 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/swagger/index.html - -
2024-10-11 16:47:39.053 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/swagger/index.html - - - 200 - text/html;charset=utf-8 150.6613ms
2024-10-11 16:47:39.201 +07:00 [INF] Request starting HTTP/1.1 GET http://localhost:5080/swagger/v1/swagger.json - -
2024-10-11 16:47:39.328 +07:00 [INF] Request finished HTTP/1.1 GET http://localhost:5080/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 127.5860ms
2024-10-11 16:59:37.614 +07:00 [INF] Application is shutting down...
