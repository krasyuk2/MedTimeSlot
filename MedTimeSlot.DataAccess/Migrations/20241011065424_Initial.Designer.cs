// <auto-generated />
using System;
using MedTimeSlot.DataAccess.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedTimeSlot.DataAccess.Migrations
{
    [DbContext(typeof(MedicalTimeSlotDbContext))]
    [Migration("20241011065424_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedTimeSlot.Core.Models.CellTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CellTimes");
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 17,
                            FirstName = "Tom",
                            LastName = "A",
                            Login = "Doctor1",
                            Speciality = "Therapist"
                        },
                        new
                        {
                            Id = 2,
                            Age = 23,
                            FirstName = "Bob",
                            LastName = "B",
                            Login = "Doctor2",
                            Speciality = "Traumatologist"
                        },
                        new
                        {
                            Id = 3,
                            Age = 42,
                            FirstName = "Sam",
                            LastName = "C",
                            Login = "Doctor3",
                            Speciality = "Surgeon"
                        });
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 29,
                            FirstName = "Tom",
                            LastName = "A",
                            Login = "Patient1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 29,
                            FirstName = "Bob",
                            LastName = "B",
                            Login = "Patient2"
                        },
                        new
                        {
                            Id = 3,
                            Age = 29,
                            FirstName = "Sam",
                            LastName = "C",
                            Login = "Patient3"
                        });
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AppointmentDuration")
                        .HasColumnType("interval");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndLunchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartLunchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.CellTime", b =>
                {
                    b.HasOne("MedTimeSlot.Core.Models.Patient", null)
                        .WithMany("CellTimes")
                        .HasForeignKey("PatientId");

                    b.HasOne("MedTimeSlot.Core.Models.Schedule", null)
                        .WithMany("Times")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Schedule", b =>
                {
                    b.HasOne("MedTimeSlot.Core.Models.Doctor", null)
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Doctor", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Patient", b =>
                {
                    b.Navigation("CellTimes");
                });

            modelBuilder.Entity("MedTimeSlot.Core.Models.Schedule", b =>
                {
                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
